// <auto-generated />
using FPSim.Data.Entity;
using FPSim.Data.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FPSim.Data.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20171101142509_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("FPSim.Data.Entity.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<byte[]>("Image");

                    b.Property<bool>("IsArchived");

                    b.Property<byte[]>("ModelFile");

                    b.Property<string>("ModelFilename");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.HasKey("Id");

                    b.ToTable("application","public");
                });

            modelBuilder.Entity("FPSim.Data.Entity.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<byte[]>("Image");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("project","public");
                });

            modelBuilder.Entity("FPSim.Data.Entity.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("ExperimentReference");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("RandomSkip");

                    b.Property<int?>("Replications");

                    b.Property<int>("ResultStatus");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("WarmUpPeriod");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("scenario","public");
                });

            modelBuilder.Entity("FPSim.Data.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user","public");
                });

            modelBuilder.Entity("FPSim.Data.Entity.Project", b =>
                {
                    b.HasOne("FPSim.Data.Entity.Application", "Application")
                        .WithMany("Projects")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FPSim.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FPSim.Data.Entity.Scenario", b =>
                {
                    b.HasOne("FPSim.Data.Entity.Project", "Project")
                        .WithMany("Scenarios")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
